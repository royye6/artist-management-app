// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  username   String   @unique @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  password   String
  image      String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt @db.Timestamp(6)
}

model RecordLabel {
  id              Int        @id @default(autoincrement())
  name            String
  website_url     String?
  address         String
  city            String
  state           String
  country         String
  signed_artists  Artist[]
  in_house_albums Album[]
  contracts       Contract[]
}

model Artist {
  id                    Int           @id @default(autoincrement())
  first_name            String        @db.VarChar(255)
  last_name             String        @db.VarChar(255)
  stage_name            String        @db.VarChar(255)
  bio                   String?
  image                 String?
  genre                 String?
  albums                Album?
  tracks                Track[]
  contract              Contract?
  music_tours           Tour[]
  transactions          Finance?
  accolades             Accolade?
  social_media_profiles SocialMedia[]
  record_label          RecordLabel   @relation(fields: [record_label_id], references: [id])
  record_label_id       Int           @unique
  created_at            DateTime      @default(now()) @db.Timestamp(6)
  updated_at            DateTime?      @updatedAt @db.Timestamp(6)
}

model Album {
  id              Int         @id @default(autoincrement())
  title           String
  release_date    DateTime    @db.Timestamp(6)
  cover_art       String?
  artist          Artist      @relation(fields: [artist_id], references: [id])
  artist_id       Int         @unique
  soundtracks     Track[]
  record_label    RecordLabel @relation(fields: [record_label_id], references: [id])
  record_label_id Int         @unique
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  updated_at      DateTime?    @updatedAt @db.Timestamp(6)
}

model Track {
  id         Int      @id @default(autoincrement())
  title      String
  duration   Int // in seconds
  filename   String   @db.VarChar(255)
  artist     Artist   @relation(fields: [artist_id], references: [id])
  artist_id  Int      @unique
  album      Album?   @relation(fields: [album_id], references: [id])
  album_id   Int?     @unique
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt @db.Timestamp(6)
}

model Tour {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  start_date DateTime @db.Timestamp(6)
  end_date   DateTime @db.Timestamp(6)
  venue      Venue    @relation(fields: [venue_id], references: [id])
  venue_id   Int      @unique
  artist     Artist   @relation(fields: [artist_id], references: [id])
  artist_id  Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt @db.Timestamp(6)
}

model Venue {
  id               Int      @id @default(autoincrement())
  name             String
  website_url      String?
  address          String
  city             String
  state            String
  country          String
  associated_tours Tour[]
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @updatedAt @db.Timestamp(6)
}

model Contract {
  id              Int         @id @default(autoincrement())
  artist          Artist      @relation(fields: [artist_id], references: [id])
  artist_id       Int         @unique
  record_label    RecordLabel @relation(fields: [record_label_id], references: [id])
  record_label_id Int         @unique
  start_date      DateTime    @db.Timestamp(6)
  end_date        DateTime    @db.Timestamp(6)
  contract_terms  String
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  updated_at      DateTime?    @updatedAt @db.Timestamp(6)
}

model Finance {
  id               Int      @id @default(autoincrement())
  artist           Artist   @relation(fields: [artist_id], references: [id])
  artist_id        Int      @unique
  transaction_type String
  amount           Decimal  @db.Decimal(1000, 2)
  description      String
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @updatedAt @db.Timestamp(6)
}

model SocialMedia {
  profile_id  Int      @id @default(autoincrement())
  artist      Artist   @relation(fields: [artist_id], references: [id])
  artist_id   Int      @unique
  platform    String
  profile_url String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @updatedAt @db.Timestamp(6)
}

model Merchandise {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(1000, 2)
  image       String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @updatedAt @db.Timestamp(6)
}

model Accolade {
  id             Int      @id @default(autoincrement())
  award_name     String   @db.VarChar(255)
  award_category String   @db.VarChar(255)
  artist         Artist   @relation(fields: [artist_id], references: [id])
  artist_id      Int      @unique
  award_date     DateTime @db.Timestamp(6)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @updatedAt @db.Timestamp(6)
}

